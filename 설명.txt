기능

카페의 위치 정보 확인 : 특정 지역의 카페 이름이나 전화번호, 위치 등의 정보를 확인해야 한다. 그중에 카페의 위치는 경위도 좌표로 알고 있어야 한다.

카페의 위치 정보 저장 : 위치 정보를 포함한 카페의 정보를 서버에 저장해야 한다. 서버의 데이터베이스에 저장한다.

카페를 위치로 조회 : 가까운 카페를 경위도 좌표로 조회해야한다.

==========================================================

첫번째 단계 는 커피숍의 위치 정보를 확인하는 것.

두번째 단계는 카페의 위치를 서버의 데이터베이스에 저장하는 것.

세번째 단계는 카페의 위치를 조회하는 것.
near : 사용자가 있는 곳에서 가장 가까운 카페 찾기
within : 사용자가 보고 있는 지도 범위 안의 카페 찾아서 보여주기.
within(circle) : 사용자가 있는 곳에서 반경 몇 미터 안에 있는 카페를 찾아서 보여 주기.

===========================================================

먼저 카페 정보를 저장할 데이터베이스 스키마를 만든다.
스키마 파일은 database 폴더 안에 만들어야 하므로 database 폴더안에 coffeeshop_schema.js 파일을 만든다.
스키마 파일에서는 Schema 객체를 만든 후 module.exports에 할당하게 되는 데 스키마를 생성하는 함수를 정의한 후 createSchema 속성에 할당한다.

==========================================================
스키마를 만들었으면 데이터베이스에서 이 스키마로 검색할 때 사용할 static 메소드를 추가한다.
검색 함수는 findAll, findNear, findWithin, findCircle 이렇게 4개를 만들것이다.
그중에서 일단 데이터베이스에 들어있는 모든 카페 정보를 저회하는 findAll메소드만 먼저 추가한다.

카페를 조히하는 코드는 스키마 파일에 넣어도 되고 라우팅하여 처리되는 파일에 넣어도 된다. 여기서는 스키마 파일에 static 메소드로 정의한 후 사용한다.

모든 카페를 조회하는 메소드는 일반적인 다른 데이터를 조회할 때 사용하던 방식과 차이가 없다. 그러나 저장되어 있는 데이터가 만개 10만개로 크게 늘어나면시스템을 거의 사용할 수가 없을 정도로 무리가 온다. 따라서 필요하다면 limit 속성을 지정하여 조회하는 데이터의 개수에 제한을 두어야한다.

카페를 검색할 수 있는 스키마 파일을 만들었으니 웹서버가 실행될 때 이 파일을 로딩할 수 잇도록 confing.js 파일에 스키마 파일 정보를 추가한다.

==========================================================
카페 정보를 추가하는 함수와 데어티 베이스의 CoffeeShop컬렉션에 있는 모든 카페 정보를 조회하는 함수를 추가한다.
routes 폴더에 CoffeeShop.js 파일을 만든 후 add 함수를 만든다.

카페를 추가하는 addCoffeeShop 함수를 만든다.
커피숍 스키마 객체는 database.CoffeeShopSchema로 참조하고,
모델 객체는 database.CoffeeShopModel 객체로 참조할 수 있으므로 모델 객체를 사용해 새로운 모델 인스턴스 객체를 만든다.

커피숍 리스트를 조회하는 함수를 추가한다.

클라이언트로부터 커피숍을 추가해 달라는 요청과 커피숍 리스트를 조회하고 싶다는 요청을 받았을 때처리하는 함수를 만들었으니 config.js 파일에 라우팅 설정을 추가한다.

사용자의 요청 패스가 /process/addcoffeeshop이면 coffeeshop 객체의 add 메소드를 호출하고

사용자의 요청 패스가 /process/listcoffeeshop이면 coffeeshop 객체의 list 메소드를 호출한다.

==========================================================
웹서버에서 라우팅하여 데이터베이스에 추가하거나 조회하는 기능을 만들어졌다.

이번에는 웹 브라우저에서 조회할 웹문서를 만들어 보자.
커피숍을 추가하는 웹문서는 public 폴더안에 addcoffeeshop.html 파일로 만든다.

커피숍을 추가할 수 있는 기능은 모두 만들었으니 커피숍 리스트를 조회할 수 있는 웹 문서를 만든 후 실행한다. 커피숍 리스트를 조회하는 웹문서는 [public] 폴던안에 listcoffeeshop.html파일로 만든다.
========================================================
커피숍을 조회하거나 찾는 함수는 [datbase]폴더의 coffeeshop_schema.js 파일 안에서스키마 객체의 static()메소드를 호추하여 등록하였다. 가장 가까운 커피숍을 차즌 함수도 이와 마찬가지로 coffeeshop_schema.js파일안에 정의한다.

가장 가까운 카페를 조회할 때는 geometry 속성의 near()메소드를 이용한다.
limit()함수는 조회 결과의 개수를 제한하는 역할을 한다. 여기서는 파라미터로 1을 넣어 주어 한개의 카페 정보만 반환한다.
========================================================
스키마 객체에 함수를 등록했으므로 이 함수를 사용하면서 클라이언트의 요청을 받아 처리할 라우팅 함수를 만든다. [routes] 폴더의 coffeeshop.js 파일을 열고 finderNear 함수를 만든 후 module.exports rorcpdml findNear 속성에 할당한다.

==========================================================
모델 객체의 findNear() 메소드를 호춣면서 경도 좌표와 위도 좌표를 파라미터로 전달하면 가장 가까운 카페를 조회할 수 있습니다. 조회한 카페의 정보는 클라이언트에 응답을 보내 준다.

웹브라우저에 보여 줄 웹 문서는 [public] 폴던 안에  nearcoffeeshop.html파일로 만든다.

사용자의 위치를 삼성역 3번 출구 버스 정류 장 부근으로 가정하고 mygeoposition.com 사이트에서 좌표를 확인한다.
config.js 파일에 클라이언트의 요청을 라우팅하는 코드를 추가한다.
==========================================================
위치 좌표로 커피숍을 찾는 기능을 만들어 봤으니 특정 범위에서 커피숍을 검색하거나 반경 안에서 커피숍을 찾는 기능도 똑같은 과정을 거치만 만들 수 있다. 이번에는 사각형 박스를 사용해 검색하는 기능을 만들어 보자.
먼저 사각형 영역을 만들고 커피숍을 찾는 함수를 coffeeshop_schema.js 파일안에 정의한다.

==========================================================
스키마 객체에 findWithin 함수를 등록했으므로 이 함수를 사용하면서 클라이언트의 요청을 받아 처리할 함수를 만든다. [routes]폴더의 coffeeshop.js 파일을 열고 findWithin 함수를 만든 후 module.exports 객체의 findWithin 속성에 할당한다.

웹 브라우져에 보여 줄 웹 문서는 public 폴더안에 withincoffeeshop.html 파일로 만든다.

검색할 사각형 박스는 삼성역 3번 출구 버스 정류장 부근에 만든다. 이곳의 좌표는 mygeoposition.com 사이트에서 확인할 수 있다. 전송 버튼을 누르면 이 좌표 값으로 서버에 요청한다. 마지막으로 config.js 파일에 클라이언트틩 요청을 라우팅하는 코드를 추가한다.

카페 검색 기능을 지원하는 많은 앱들은 현재 사용자가 보고이 ㅆ는 자도 영역 안에 들어 있는 커피숍을 찾아 주게 때문에 지금 만들어 본 within() 메소드 방벙을 많이 사용한다.

==========================================================
반경 안의 커피숍 찾기

반경은 사용자가 있는 위치를 기준으로 원을 그렸을 때 만들어지는 영역을 말한다.
몽고디비에서는 앞에서 사용한 within() 메소드에 반경 정볼르 넣어 주면 그 안에 들어 있는 것들을 찾을 수 있다. 따라서 앞에서 만든 기능과 똑같은 과정을 거쳐 만든다.

먼저 기준점과 기준점으로부터 거리를 파라미터로 전달하면서 커피숍을 찾는 함수를 coffeeshop_schema.js 파일안에 정의한다.


==========================================================
지도에 커피숍의 위치 표시하기

커피숍의 위치를 글자보다는 지도로 보여 주는 것이 좋다.
데이터베이스에서 조회한 커피숍의 위치를 지도 위에 표시해 보자.

지도에 내 위치 보여주기

구글맵을 사용하자.
[public] 폴더 안에 map.html 파일을 만든다.




















































;
